# YAML file that takes
# inputs:  Ra/DEC positions (from simulation), then uses WCS tan projection
#          Sersic galaxies (from a realistic catalog with some half_light_radius, scale_radius)
# output:  multiple images in fits format
# Elements of GalSim demos 3, 4, 6, and 11 were combined
# along with some nbrsim configs from Erin

# The PSF is a truncated Moffat profile, and the galaxy is bulge plus
# disk, with added knots of star formation.  Both components get many of their
# parameters from an input catalog.  We also shift the profile by a fraction of
# a pixel in each direction so the effect of pixelization varies among the
# images.  Each galaxy has the same applied shear.  The noise is simple Poisson
# noise.  We write the images out into a multi-extension fits file.
#

# You can define variables to be used later using the & symbol here.
# Later they will be used with the * symbol.
# This can be useful since you can put things you want to change often near the top of the 
# file so you don't have to scroll down to find the right place to edit something each time 
# you want to change it.
some_variables :
    - &sky_level  1.e6                # ADU / arcsec^2
    - &pixel_scale  1.               # arcsec / pixel  (size units in input catalog are pixels)
    - &gal_flux  1.e6                 # arbitrary choice, makes nice (not too) noisy images
    - &gal_g1  -0.009                 #
    - &gal_g2  0.011                  #
    - &image_size  64                 # pixels
    - &run "001"
    - &NBRSIM_DIR $os.environ['NBRSIM_DIR']  # Need to have this env variable

modules :
    - galsim_extra  # For PostOp stamp type 

# Define the PSF profile (taken from demo6)
psf : 
    type : Sum
    items :
        - { type : Gaussian, fwhm : 0.6, flux : 0.8 }
        - { type : Gaussian, fwhm : 2.3, flux : 0.2 }

# Define the galaxy profile (taken from demo6)
gal :
    type : Sum

    items :
        -   # First the bulge
            type : Sersic
            n : 3.5
            #half_light_radius : 2.3  # arcsec
            half_light_radius : { type : Catalog , num : 1 , col : 8 }
            flux : 0.3  # flux here is used to mean "fractional flux"

        -   # Now the disk
            type : Sersic
            n : 1.5
            #scale_radius : 0.85  # arcsec
            half_light_radius : { type : Catalog , num : 1 , col : 5 }
            flux : 0.7

    flux : *gal_flux

    rotate :
        # An angle of type Random means uniform within 0 .. 2pi radians
        type : Random

    # Also apply a magnification mu = ( (1-kappa)^2 - |gamma|^2 )^-1
    # This conserves surface brightness, so it scales both the area and flux.
    magnify : 1.082

    shear :
        type : G1G2  # Reduced shear (remember that order matters wrt to other shape ops)
        g1 : { type : Catalog , num : 1 , col : 2 }  # The cat actually doesn't contain g1, g2
        g2 : { type : Catalog , num : 1 , col : 3 }  # This is a place-holder
    
# Define some other information about the images
# combo of demo11 and WCS from an Erin config
image :
    type : Scattered
    pixel_scale : *pixel_scale
    xsize : *image_size
    ysize : *image_size

    index_convention : 0

    noise : 
        # Since the default type is Poisson, we may omit it.
        sky_level : *sky_level

    random_seed : 8241573

    wcs:
        type : Tan
        dudx : 0.263
        dudy : 0.000
        dvdx : 0.000
        dvdy : 0.263
        origin : center
        ra : 51.548 degrees  # This will be the center of each DES tile
        dec : -48.280 degrees

    world_pos:
        type: RADec
        ra :
            type : Degrees
            theta :
                type : Catalog
                num : 0
                col : 0
        dec :
            type : Degrees
            theta :
                type : Catalog            
                num : 0
                col : 1

# Define the input files
input :
    # In this case, we have a catalog for positions and one for half light radii, etc.
    catalog : [
        { dir : /Users/amichoi/data/sims/, file_name: radec.asc },
        { dir: /Users/amichoi/src/GalSim/examples/input, file_name: galsim_default_input.asc }
    ]
          
# Define the name and format of the output file
output :

    # type = MultiFits means to use a multi-extension fits file
    #type : MultiFits
    type : Fits
    nfiles : 1

    dir : output_yaml
    file_name :
        type : FormattedStr
        format : "%s/test-%06d.fits"
        items :
        - *run
        - { type: Sequence, nitems: '@output.nfiles' }

    # You can specify how many extensions to write to the file with nimages, 
    # but in this case, since we are using an input catalog, the default 
    # value is to do the number of entries in the catalog.
    # nimages : 10

